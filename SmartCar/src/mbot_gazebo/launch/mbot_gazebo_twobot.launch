<launch>

  <arg name="first_robot"  default="mbot1"/>
  <arg name="second_robot"  default="mbot2"/>

  <arg name="mbot1_pos_x" default="0"/>
  <arg name="mbot1_pos_y" default="-1"/>
  <arg name="mbot1_pos_z" default="0.0"/>
 
  <arg name="mbot2_pos_x" default="0"/>
  <arg name="mbot2_pos_y" default="1"/>
  <arg name="mbot2_pos_z" default="0.0"/>

    <!-- 设置launch文件的参数 -->
    <arg name="world_name" value="$(find mbot_gazebo)/worlds/demo2.world"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- 运行gazebo仿真环境 -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <group ns="$(arg first_robot)">
            <!-- 加载机器人模型描述参数 -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mbot_gazebo)/urdf/mbot_with_imu.xacro' ns:=mbot1" /> 
        
        <node pkg="tf" type="static_transform_publisher" name="mbot1_map" args="0.0 0.0 0.0 0.0 0.0 0.0 /map /mbot1_odom 50" />
        <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node> 
        <!-- 运行robot_state_publisher节点，发布tf  -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" >
            <param name="publish_frequency" type="double" value="50.0" />
            <!-- <param name="tf_prefix" value="mbot1" /> -->
        </node>
            <!-- 在gazebo中加载机器人模型-->
            <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                args="-urdf -model $(arg first_robot) -param robot_description -x $(arg mbot1_pos_x) -y $(arg mbot1_pos_y) -z $(arg mbot1_pos_z)"/> 
    </group>

    <group ns="$(arg second_robot)">
            <!-- 加载机器人模型描述参数 -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find mbot_gazebo)/urdf/mbot_with_kinect.xacro' ns:=mbot2" /> 
        <node pkg="tf" type="static_transform_publisher" name="mbot2_map" args="0.0 0.0 0.0 0.0 0.0 0.0 /map /mbot2_odom 50" />
        <!-- 运行joint_state_publisher节点，发布机器人的关节状态  -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"></node> 
        <!-- 运行robot_state_publisher节点，发布tf  -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" >
            <param name="publish_frequency" type="double" value="50.0" />
            <!-- <param name="tf_prefix" value="mbot2" /> -->
        </node>
            <!-- 在gazebo中加载机器人模型-->
            <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
                args="-urdf -model $(arg second_robot) -param robot_description -x $(arg mbot2_pos_x) -y $(arg mbot2_pos_y) -z $(arg mbot2_pos_z)" /> 
            <!--remap from="mbot2_vel" to="cmd_vel"/-->
    </group>

      <!-- 运行rviz可视化-->
    <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find mbot_gazebo)/config/double_mbots.rviz" required="true"/>
   
</launch>